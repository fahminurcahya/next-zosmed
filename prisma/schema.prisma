// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["zosmed"]
}

model User {
  id            String          @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  subscription  Subscription?
  integration   Integration[]
  notification  Notification[]
  workflows     Workflow[]
  UsageTracking UsageTracking[]

  @@unique([email])
  @@map("user")
  @@schema("zosmed")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@schema("zosmed")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
  @@schema("zosmed")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@schema("zosmed")
}

model Subscription {
  id                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User                User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?            @unique
  createdAt           DateTime           @default(now())
  plan                SUBSCRIPTION_PLAN  @default(FREE)
  updatedAt           DateTime           @default(now())
  // Limits & Usage
  maxAccounts         Int                @default(1)
  maxDMPerMonth       Int                @default(100)
  currentDMCount      Int                @default(0)
  dmResetDate         DateTime           @default(now())
  // AI Features
  hasAIReply          Boolean            @default(false)
  hasAISalesPredictor Boolean            @default(false)
  // Billing
  status              SubscriptionStatus @default(ACTIVE)
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean            @default(false)

  @@map("subscription")
  @@schema("zosmed")
}

enum SUBSCRIPTION_PLAN {
  FREE // Rp 0 - 1 akun, 100 DM
  STARTER // Rp 99k - 3 akun, 2000 DM, AI terbatas
  PRO // Rp 199k - 10 akun, 10k DM, full AI

  @@schema("zosmed")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED

  @@schema("zosmed")
}

model Integration {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            INTEGRATION_TYPE @default(INSTAGRAM)
  accountUsername String
  accountId       String           @unique // Instagram account ID
  accessToken     String           @db.Text
  refreshToken    String?          @db.Text
  tokenType       String?
  scope           String?
  expiresAt       DateTime?
  lastSyncAt      DateTime?
  workflows       Workflow[]
  comments        Comment[]
  messages        DirectMessage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  UsageTracking   UsageTracking[]

  @@unique([userId, accountId])
  @@index([userId])
  @@map("integration")
  @@schema("zosmed")
}

enum INTEGRATION_TYPE {
  INSTAGRAM

  @@schema("zosmed")
}

model DirectMessage {
  id                  String       @id @default(cuid())
  integrationId       String
  integration         Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  messageId           String       @unique
  threadId            String
  senderId            String
  senderUsername      String
  text                String       @db.Text
  timestamp           DateTime
  isReplied           Boolean      @default(false)
  repliedAt           DateTime?
  replyText           String?      @db.Text
  replyStatus         ReplyStatus?
  workflowExecutionId String?
  createdAt           DateTime     @default(now())

  @@index([integrationId, isReplied])
  @@index([threadId])
  @@map("direct_message")
  @@schema("zosmed")
}

enum ReplyStatus {
  PENDING
  SUCCESS
  FAILED
  SKIPPED

  @@schema("zosmed")
}

model Comment {
  id                  String       @id @default(cuid())
  integrationId       String
  integration         Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  commentId           String       @unique
  postId              String
  userId              String
  username            String
  text                String       @db.Text
  isReplied           Boolean      @default(false)
  repliedAt           DateTime?
  replyText           String?      @db.Text
  replyStatus         ReplyStatus?
  dmSent              Boolean      @default(false)
  dmSentAt            DateTime?
  workflowExecutionId String?

  createdAt DateTime @default(now())

  @@index([integrationId, isReplied])
  @@index([postId])
  @@map("comment")
  @@schema("zosmed")
}

model Workflow {
  id             String                   @id @default(cuid())
  userId         String
  integrationId  String
  integration    Integration              @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  definition     String
  isActive       Boolean                  @default(true)
  triggerType    WorkflowTriggerType
  lastRunAt      DateTime?
  lastRunStatus  WorkflowExecutionStatus?
  totalRuns      Int                      @default(0)
  successfulRuns Int                      @default(0)
  executions     WorkflowExecution[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  User           User                     @relation(fields: [userId], references: [id])

  @@unique([name, userId])
  @@index([integrationId, isActive])
  @@map("workflow")
  @@schema("zosmed")
}

enum WorkflowTriggerType {
  COMMENT_RECEIVED
  DM_RECEIVED

  @@schema("zosmed")
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ERROR

  @@schema("zosmed")
}

model WorkflowExecution {
  id              String                  @id @default(cuid())
  workflowId      String
  userId          String
  trigger         String
  status          WorkflowExecutionStatus @default(PENDING)
  createdAt       DateTime                @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  definition      String                  @default("{}")
  creditsConsumed Int                     @default(0)
  phases          ExecutionPhase[]
  workflow        Workflow                @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_execution")
  @@schema("zosmed")
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED

  @@schema("zosmed")
}

model ExecutionPhase {
  id                  String               @id @default(cuid())
  userId              String
  status              ExecutionPhaseStatus @default(PENDING)
  number              Int
  node                String
  name                String
  startedAt           DateTime?
  completedAt         DateTime?
  inputs              String?
  outputs             String?
  errorMessage        String?
  creditsConsumed     Int?
  workflowExecutionId String
  execution           WorkflowExecution    @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs                ExecutionLog[]

  @@map("execution_phase")
  @@schema("zosmed")
}

enum ExecutionPhaseStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  SKIPPED

  @@schema("zosmed")
}

model ExecutionLog {
  id               String         @id @default(cuid())
  logLevel         LogLevel       @default(INFO)
  message          String
  timestamp        DateTime       @default(now())
  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)

  @@map("execution_log")
  @@schema("zosmed")
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR

  @@schema("zosmed")
}

model WorkflowTemplate {
  id          String  @id @default(cuid())
  name        String
  description String
  category    String // e.g., "Sales", "Support", "Community"
  definition  String
  isPremium   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workflow_template")
  @@schema("zosmed")
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  isSeen    Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())

  @@map("notification")
  @@schema("zosmed")
}

model UsageTracking {
  id             String      @id @default(cuid())
  userId         String
  integrationId  String
  user           User        @relation(fields: [userId], references: [id])
  integration    Integration @relation(fields: [integrationId], references: [id])
  date           DateTime    @db.Date
  dmSent         Int         @default(0)
  commentReplied Int         @default(0)
  workflowRuns   Int         @default(0)
  createdAt      DateTime    @default(now())

  @@unique([userId, integrationId, date])
  @@index([userId, date])
  @@map("usage_tracking")
  @@schema("zosmed")
}
